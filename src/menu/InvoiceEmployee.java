/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package menu;

import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Element;
import com.lowagie.text.FontFactory;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import connect.MainConnection;
import java.awt.Color;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author PC
 */
public class InvoiceEmployee extends javax.swing.JFrame {

    /**
     * Creates new form Invoice
     */
  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenuInvoice = new javax.swing.JPopupMenu();
        Check = new javax.swing.JMenuItem();
        Print = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        invoice_tb = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jid = new javax.swing.JLabel();
        jdoctor = new javax.swing.JLabel();
        jdate = new javax.swing.JLabel();
        jpatilent = new javax.swing.JLabel();
        jamount = new javax.swing.JLabel();
        jpayment = new javax.swing.JLabel();
        jstatus = new javax.swing.JLabel();
        inputid = new javax.swing.JTextField();
        inputdoctor = new javax.swing.JTextField();
        inputpatilent = new javax.swing.JTextField();
        inputstatus = new javax.swing.JTextField();
        inputdate = new javax.swing.JTextField();
        inputamount = new javax.swing.JTextField();
        inputmethod = new javax.swing.JTextField();
        jreset = new javax.swing.JButton();

        Check.setText("Check");
        Check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckActionPerformed(evt);
            }
        });
        jPopupMenuInvoice.add(Check);

        Print.setText("Print");
        Print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintActionPerformed(evt);
            }
        });
        jPopupMenuInvoice.add(Print);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        invoice_tb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "InvoiceID", "Doctor", "Patient", "DateTime", "TotalAmount", "PaymentMethod", "Status"
            }
        ));
        invoice_tb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                invoice_tbMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(invoice_tb);

        jLabel6.setBackground(new java.awt.Color(255, 51, 51));
        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("X");
        jLabel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        jid.setText("ID:");

        jdoctor.setText("Doctor:");

        jdate.setText("Date Time:");

        jpatilent.setText("Patilent:");

        jamount.setText("Total Amount:");

        jpayment.setText("Payment Method:");

        jstatus.setText("Status:");

        jreset.setText("Reset");
        jreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jresetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jstatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jpatilent, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(inputstatus)
                                    .addComponent(inputpatilent, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(118, 118, 118)
                                        .addComponent(jpayment, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(276, 276, 276)
                                        .addComponent(jreset))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jid, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(inputid, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(118, 118, 118)
                                        .addComponent(jdate, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jdoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(inputdoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(118, 118, 118)
                                        .addComponent(jamount, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(inputdate, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputamount, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputmethod, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 833, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jid)
                            .addComponent(jdate)
                            .addComponent(inputid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jdoctor)
                            .addComponent(jamount)
                            .addComponent(inputdoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputamount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jpayment)
                            .addComponent(jpatilent)
                            .addComponent(inputpatilent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputmethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addComponent(jstatus))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(inputstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jreset)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 13, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void invoice_tbMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invoice_tbMousePressed
 if (evt.getClickCount() == 2) { // Kiểm tra số lần nhấp chuột là 2
            int row = invoice_tb.getSelectedRow();
            if (row >= 0) {
                String invoiceId = (String) invoice_tb.getValueAt(row, 0);
                InvoiceDetail invoiceDetailFrame = new InvoiceDetail();  
                invoiceDetailFrame.addDataById(invoiceId);  
                invoiceDetailFrame.setVisible(true);  
            }
        }        
    }//GEN-LAST:event_invoice_tbMousePressed

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
   this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel6MouseClicked

    private void CheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckActionPerformed
                                   
    int row = invoice_tb.getSelectedRow();
    if (row >= 0) {
        String invoiceId = (String) invoice_tb.getValueAt(row, 0);

        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = MainConnection.getConnection();
            // Adjusted to match the actual column names in the DoctorManager and Patients tables
            String query = "SELECT i.Invoice_id, i.DateTime, i.TotalAmount, i.PaymentMethod, i.Status, d.Name AS Doctor_name, p.Patient_name FROM Invoices i JOIN DoctorManager d ON i.Doctor_id = d.Doctor_id JOIN Patients p ON i.Patient_id = p.Patient_id WHERE i.Invoice_id = ?";
            pstmt = conn.prepareStatement(query);
            pstmt.setString(1, invoiceId);
            rs = pstmt.executeQuery();

            if (rs.next()) {
                inputid.setText(rs.getString("Invoice_id"));
                inputdoctor.setText(rs.getString("Doctor_name")); // Displays the doctor's name
                inputpatilent.setText(rs.getString("Patient_name")); // Displays the patient's name
                inputdate.setText(rs.getString("DateTime"));
                inputamount.setText(rs.getString("TotalAmount"));
                inputmethod.setText(rs.getString("PaymentMethod"));
                inputstatus.setText(rs.getString("Status"));
            }
        } catch (SQLException ex) {
            System.out.println("Error: " + ex.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                System.out.println("Error closing resources: " + ex.getMessage());
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "Please select an invoice to check.");
    }


    }//GEN-LAST:event_CheckActionPerformed

    private void PrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintActionPerformed
     int row = invoice_tb.getSelectedRow();
    String invoiceId = null;
    if (row >= 0) {
        invoiceId = (String) invoice_tb.getValueAt(row, 0);
    } else {
        JOptionPane.showMessageDialog(null, "Please select an invoice to print.");
        return;
    }

    try {
        Connection conn = MainConnection.getConnection();
        String selectQuery = "SELECT * FROM Invoices WHERE Invoice_id = ?";
        PreparedStatement pstmt = conn.prepareStatement(selectQuery);
        pstmt.setString(1, invoiceId);
        ResultSet rs = pstmt.executeQuery();

        // Create PDF document
        Document document = new Document();
        String filePath = "C:\\Users\\PC\\Desktop\\" + invoiceId + ".pdf";
        PdfWriter.getInstance(document, new FileOutputStream(filePath));
        document.open();
          // Add title "Invoice payment"
 Paragraph title = new Paragraph("Invoice", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18));
 title.setAlignment(Element.ALIGN_CENTER);
 document.add(title);

 // Add some space after the title
 document.add(new Paragraph(" "));
        // Add title and metadata
        document.addTitle("Invoice " + invoiceId);
        document.addAuthor("Your Company Name");
        document.add(new Paragraph("Invoice Num: " + invoiceId, FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16)));
        document.add(new Paragraph(" "));
        document.add(new Paragraph("--------------------------------------"));

        // Add invoice information
        if (rs.next()) {
            document.add(new Paragraph("DateTime: " + rs.getString("DateTime")));
            document.add(new Paragraph("Total Amount: " + rs.getString("TotalAmount")));
            document.add(new Paragraph("Payment Method: " + rs.getString("PaymentMethod")));
            document.add(new Paragraph("Status: " + rs.getString("Status")));
        }
        rs.close();

        // Add invoice details
        String selectDetailQuery = "SELECT Medicine.Medicine_name, InvoiceDetails.Quantity, InvoiceDetails.UnitPrice, InvoiceDetails.TotalPrice " +
                                   "FROM InvoiceDetails " +
                                   "INNER JOIN Medicine ON InvoiceDetails.Medicine_id = Medicine.Medicine_id " +
                                   "WHERE Invoice_id = ?";
        pstmt = conn.prepareStatement(selectDetailQuery);
        pstmt.setString(1, invoiceId);
        rs = pstmt.executeQuery();

        document.add(new Paragraph(" "));
        document.add(new Paragraph("--------------------------------------"));
        document.add(new Paragraph("Invoice Detail:", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14)));
        document.add(new Paragraph(" "));

        // Create table with headers
        PdfPTable table = new PdfPTable(4); // 4 columns
        table.setWidthPercentage(100);
        table.setSpacingBefore(10f);
        table.setSpacingAfter(10f);

        // Set column widths
        float[] columnWidths = {3f, 1f, 1f, 1f};
        table.setWidths(columnWidths);

        // Create table header
        PdfPCell cell = new PdfPCell(new Phrase("Name", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));
        cell.setBackgroundColor(Color.LIGHT_GRAY);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Quantity", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));
        cell.setBackgroundColor(Color.LIGHT_GRAY);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Unit Price", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));
        cell.setBackgroundColor(Color.LIGHT_GRAY);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Total Price", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));
        cell.setBackgroundColor(Color.LIGHT_GRAY);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        // Add table data
        while (rs.next()) {
            table.addCell(new PdfPCell(new Phrase(rs.getString("Medicine_name"))));
            table.addCell(new PdfPCell(new Phrase(rs.getString("Quantity"))));
            table.addCell(new PdfPCell(new Phrase(rs.getString("UnitPrice"))));
            table.addCell(new PdfPCell(new Phrase(rs.getString("TotalPrice"))));
        }

        // Add table to document
        document.add(table);

        // Close document
        document.close();
        rs.close();
        JOptionPane.showMessageDialog(null, "The invoice has been printed successfully.");
    } catch (SQLException | DocumentException | FileNotFoundException ex) {
        System.out.println("Error: " + ex.getMessage());
        JOptionPane.showMessageDialog(null, "An error occurred while creating the PDF invoice.");
    }
    }//GEN-LAST:event_PrintActionPerformed

    private void jresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jresetActionPerformed
        inputid.setText("");
        inputdoctor.setText("");
        inputpatilent.setText("");
        inputdate.setText("");
        inputamount.setText("");     
        inputstatus.setText("");  
        inputmethod.setText("");  
    }//GEN-LAST:event_jresetActionPerformed

    /**
     * @param args the command line arguments
     */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Check;
    private javax.swing.JMenuItem Print;
    private javax.swing.JTextField inputamount;
    private javax.swing.JTextField inputdate;
    private javax.swing.JTextField inputdoctor;
    private javax.swing.JTextField inputid;
    private javax.swing.JTextField inputmethod;
    private javax.swing.JTextField inputpatilent;
    private javax.swing.JTextField inputstatus;
    private static javax.swing.JTable invoice_tb;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPopupMenu jPopupMenuInvoice;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jamount;
    private javax.swing.JLabel jdate;
    private javax.swing.JLabel jdoctor;
    private javax.swing.JLabel jid;
    private javax.swing.JLabel jpatilent;
    private javax.swing.JLabel jpayment;
    private javax.swing.JButton jreset;
    private javax.swing.JLabel jstatus;
    // End of variables declaration//GEN-END:variables
   public InvoiceEmployee() {
        initComponents();
        loadInvoices(); 
         invoice_tb.setComponentPopupMenu(jPopupMenuInvoice);
    }
  private void loadInvoices() {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = MainConnection.getConnection();
            String query = "SELECT d.Name AS Doctor, p.Patient_name AS Patient,i.Invoice_id, i.DateTime, i.TotalAmount, i.PaymentMethod, i.Status " +
                           "FROM Invoices i " +
                           "INNER JOIN DoctorManager d ON i.Doctor_id = d.Doctor_id " +
                           "INNER JOIN Patients p ON i.Patient_id = p.Patient_id";
            pstmt = conn.prepareStatement(query);
            rs = pstmt.executeQuery();

            DefaultTableModel model = (DefaultTableModel) invoice_tb.getModel();
            while (rs.next()) {
                Object[] row = new Object[7]; // Changed array size to 7
                row[0] = rs.getString("Invoice_id");
                row[1] = rs.getString("Doctor");
                row[2] = rs.getString("Patient");
                row[3] = rs.getTimestamp("DateTime");
                row[4] = rs.getDouble("TotalAmount");
                row[5] = rs.getString("PaymentMethod");
                row[6] = rs.getString("Status");
                model.addRow(row);
            }
        } catch (SQLException ex) {
            System.out.println("Error: " + ex.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (SQLException ex) {
                System.out.println("Error closing resources: " + ex.getMessage());
            }
        }
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InvoiceEmployee().setVisible(true);
            }
        });
    }
}

