/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package menu;

import connect.MainConnection;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HOANG KHANG
 */
public class Medicines extends javax.swing.JFrame {

    /**
     * Creates new form Medicines
     */
    public Medicines() {
        initComponents();
        // Gắn PopupMenu vào bảng
        medicalTable.setComponentPopupMenu(PopupMenuMedicine);
        loadMedical();
 loadCategoryName();
    }
private void loadCategoryName() {
    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;

    try {
        conn = MainConnection.getConnection();
        String query = "SELECT CategoryName FROM MedicineCategories";
        pstmt = conn.prepareStatement(query);
        rs = pstmt.executeQuery();

        // Clear existing items in the JComboBox
        jboxcategory.removeAllItems();

        // Add category names to the JComboBox
        while (rs.next()) {
            jboxcategory.addItem(rs.getString("CategoryName"));
        }
    } catch (SQLException ex) {
        System.out.println("Error: " + ex.getMessage());
    } finally {
        try {
            if (rs != null) {
                rs.close();
            }
            if (pstmt != null) {
                pstmt.close();
            }
            if (conn != null) {
                conn.close();
            }
        } catch (SQLException ex) {
            System.out.println("Error closing resources: " + ex.getMessage());
        }
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PopupMenuMedicine = new javax.swing.JPopupMenu();
        EditMenuPopup = new javax.swing.JMenuItem();
        DeleteMenuPopup = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jScrollPane2 = new javax.swing.JScrollPane();
        medicalTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        inputMedicine = new javax.swing.JTextField();
        inputmedicinename = new javax.swing.JTextField();
        inputprice = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        inputQuantity = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jboxcategory = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();

        EditMenuPopup.setText("Edit");
        EditMenuPopup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditMenuPopupActionPerformed(evt);
            }
        });
        PopupMenuMedicine.add(EditMenuPopup);

        DeleteMenuPopup.setText("Delete");
        DeleteMenuPopup.setToolTipText("");
        DeleteMenuPopup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteMenuPopupActionPerformed(evt);
            }
        });
        PopupMenuMedicine.add(DeleteMenuPopup);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        medicalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Category ID", "Name", "Price", "Quantity"
            }
        ));
        jScrollPane2.setViewportView(medicalTable);

        inputMedicine.setEditable(false);
        inputMedicine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputMedicineActionPerformed(evt);
            }
        });

        inputmedicinename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputmedicinenameActionPerformed(evt);
            }
        });

        jLabel1.setText("Catelogy Name:");

        jLabel2.setText("Medicine ID:");

        jLabel3.setText("Medicine Name:");

        jLabel4.setText("Price:");

        jLabel5.setText("Quantity Medicine:");

        inputQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputQuantityActionPerformed(evt);
            }
        });

        submitButton.setText("Save");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        jboxcategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(submitButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resetButton))
                    .addComponent(jboxcategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inputmedicinename, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                    .addComponent(inputMedicine)
                    .addComponent(inputprice)
                    .addComponent(inputQuantity))
                .addContainerGap(106, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputMedicine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jboxcategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputmedicinename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(inputQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitButton)
                    .addComponent(resetButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel6.setBackground(new java.awt.Color(255, 51, 51));
        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("X");
        jLabel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputMedicineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputMedicineActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputMedicineActionPerformed

    private void inputQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputQuantityActionPerformed

    private void inputmedicinenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputmedicinenameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputmedicinenameActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
  String categoryName = jboxcategory.getSelectedItem().toString();
    String medicineName = inputmedicinename.getText();
    String price = inputprice.getText();
    String quantity = inputQuantity.getText();

    if (!isCategoryNameValid(categoryName)) {
        JOptionPane.showMessageDialog(this, "Invalid category name.");
        return;
    }

    if (!isMedicineNameValid(medicineName)) {
        JOptionPane.showMessageDialog(this, "Invalid medicine name.");
        return;
    }

    if (!isPriceValid(price)) {
        JOptionPane.showMessageDialog(this, "Invalid price. Please enter a valid price.");
        return;
    }

    if (!isQuantityValid(quantity)) {
        JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a valid quantity.");
        return;
    }

    Connection conn = null;
    PreparedStatement pstmt = null;

    try {
        conn = MainConnection.getConnection();

        String categoryIdQuery = "SELECT Category_id FROM MedicineCategories WHERE CategoryName = ?";
        pstmt = conn.prepareStatement(categoryIdQuery);
        pstmt.setString(1, categoryName);
        ResultSet rs = pstmt.executeQuery();

        int categoryId = -1;
        if (rs.next()) {
            categoryId = rs.getInt("Category_id");
        } else {
            JOptionPane.showMessageDialog(this, "Invalid category name.");
            return;
        }

        String insertOrUpdateQuery = "";
        if (inputMedicine.getText().isEmpty()) {
            // Insert new record
            insertOrUpdateQuery = "INSERT INTO Medicine (Category_id, Medicine_name, Price, Quantity_Medicine) VALUES (?, ?, ?, ?)";
        } else {
            // Update existing record
            insertOrUpdateQuery = "UPDATE Medicine SET Category_id = ?, Medicine_name = ?, Price = ?, Quantity_Medicine = ? WHERE Medicine_id = ?";
        }

        pstmt = conn.prepareStatement(insertOrUpdateQuery);
        pstmt.setInt(1, categoryId);
        pstmt.setString(2, medicineName);
        pstmt.setBigDecimal(3, new BigDecimal(price));
        pstmt.setInt(4, Integer.parseInt(quantity));
        if (!inputMedicine.getText().isEmpty()) {
            pstmt.setInt(5, Integer.parseInt(inputMedicine.getText()));
        }

        int rowsAffected = pstmt.executeUpdate();
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Operation successful.");
        } else {
            JOptionPane.showMessageDialog(this, "Operation failed.");
        }

        // Reload the table data
        DefaultTableModel model = (DefaultTableModel) medicalTable.getModel();
        model.setRowCount(0); // Clear existing data
        loadMedical(); // Reload data from database

    } catch (SQLException ex) {
        System.out.println("Error: " + ex.getMessage());
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    } finally {
        try {
            if (pstmt != null) {
                pstmt.close();
            }
            if (conn != null) {
                conn.close();
            }
        } catch (SQLException ex) {
            System.out.println("Error closing resources: " + ex.getMessage());
        }
    }
}

// Sample validation methods (need to implement these properly)
private boolean isCategoryNameValid(String categoryName) {
  return categoryName.matches("[a-zA-Z]+");
}

private boolean isMedicineNameValid(String medicineName) {
 return medicineName.matches("[a-zA-Z]+");
}

private boolean isPriceValid(String price) {
    try {
        BigDecimal priceValue = new BigDecimal(price);
        return priceValue.compareTo(BigDecimal.ZERO) > 0; // Price should be greater than zero
    } catch (NumberFormatException e) {
        return false;
    }
}

private boolean isQuantityValid(String quantity) {
    try {
        int quantityValue = Integer.parseInt(quantity);
        return quantityValue > 0; // Quantity should be a positive integer
    } catch (NumberFormatException e) {
        return false;
    }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void EditMenuPopupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditMenuPopupActionPerformed
 int row = medicalTable.getSelectedRow();
    if (row >= 0) {
        String medicalId = (String) medicalTable.getValueAt(row, 0);

        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = MainConnection.getConnection();
            String query = "SELECT m.Medicine_id, m.Medicine_name, m.Price, m.Quantity_Medicine, c.CategoryName "
                         + "FROM Medicine m "
                         + "INNER JOIN MedicineCategories c ON m.Category_id = c.Category_id "
                         + "WHERE m.Medicine_id = ?";
            pstmt = conn.prepareStatement(query);
            pstmt.setString(1, medicalId);
            rs = pstmt.executeQuery();

            if (rs.next()) {
                inputMedicine.setText(rs.getString("Medicine_id"));
                 jboxcategory.setSelectedItem(rs.getString("CategoryName"));
                inputmedicinename.setText(rs.getString("Medicine_name"));
                inputprice.setText(rs.getBigDecimal("Price").toString());
                int quantity = rs.getInt("Quantity_Medicine");
                inputQuantity.setText(String.valueOf(quantity));
            } else {
                JOptionPane.showMessageDialog(this, "Medicine not found");
            }
        } catch (SQLException ex) {
            System.out.println("Error: " + ex.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                System.out.println("Error closing resources: " + ex.getMessage());
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a medicine to edit");
    }
    }//GEN-LAST:event_EditMenuPopupActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        inputMedicine.setText("");
        inputQuantity.setText("");
        jboxcategory.setSelectedIndex(-1);
        inputmedicinename.setText("");
        inputprice.setText("");
    }//GEN-LAST:event_resetButtonActionPerformed

    private void DeleteMenuPopupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteMenuPopupActionPerformed
       int row = medicalTable.getSelectedRow();
String medicalid = null;
if (row >= 0) {
    medicalid = (String) medicalTable.getValueAt(row, 0);
    // Confirm before delete
    int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this medicine?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        DeleteMedicine(medicalid);
    }
} else {
    JOptionPane.showMessageDialog(this, "Please select a medicine to delete");
}

    }//GEN-LAST:event_DeleteMenuPopupActionPerformed

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        this.dispose();
    }//GEN-LAST:event_jLabel6MouseClicked
    public void DeleteMedicine(String medicalid) {
        Connection conn = null;
        PreparedStatement pstmt1 = null;
        PreparedStatement pstmt2 = null;
        ResultSet rs = null;

        try {
            conn = MainConnection.getConnection();
            conn.setAutoCommit(false); // Start transaction

            String deleteInvoiceDetailsQuery = "DELETE FROM InvoiceDetails WHERE Medicine_id = " + medicalid + "";
            String deleteMedicineQuery = "DELETE FROM Medicine WHERE Medicine_id = " + medicalid + "";
            pstmt1 = conn.prepareStatement(deleteInvoiceDetailsQuery);
            pstmt1.executeUpdate();

            pstmt2 = conn.prepareStatement(deleteMedicineQuery);
            pstmt2.executeUpdate();

            conn.commit(); // Commit transaction

            JOptionPane.showMessageDialog(this, "Medicine deleted successfully");

            // Reload the table data
            DefaultTableModel model = (DefaultTableModel) medicalTable.getModel();
            model.setRowCount(0); // Clear existing data
            loadMedical(); // Reload data from database

        } catch (SQLException ex) {
            System.out.println("Error: " + ex.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt1 != null) {
                    pstmt1.close();
                }
                if (pstmt2 != null) {
                    pstmt2.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                System.out.println("Error closing resources: " + ex.getMessage());
            }
        }
    }

    /**
     * @param args the command line arguments
     */
  private void loadMedical() {
    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;

    try {
        conn = MainConnection.getConnection();
        String query = "SELECT m.Medicine_id, c.CategoryName, m.Medicine_name, m.Price, m.Quantity_Medicine "
                     + "FROM Medicine m "
                     + "INNER JOIN MedicineCategories c ON m.Category_id = c.Category_id";
        pstmt = conn.prepareStatement(query);
        rs = pstmt.executeQuery();

        DefaultTableModel model = (DefaultTableModel) medicalTable.getModel();
        while (rs.next()) {
            Object[] row = new Object[5];
            row[0] = rs.getString("Medicine_id");
            row[1] = rs.getString("CategoryName");
            row[2] = rs.getString("Medicine_name");
            row[3] = rs.getBigDecimal("Price");
            row[4] = rs.getInt("Quantity_Medicine");
            model.addRow(row);
        }
    } catch (SQLException ex) {
        System.out.println("Error: " + ex.getMessage());
    } finally {
        try {
            if (rs != null) {
                rs.close();
            }
            if (pstmt != null) {
                pstmt.close();
            }
            if (conn != null) {
                conn.close();
            }
        } catch (SQLException ex) {
            System.out.println("Error closing resources: " + ex.getMessage());
        }
    }
}


    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MedicinesCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MedicinesCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MedicinesCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MedicinesCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Medicines().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem DeleteMenuPopup;
    private javax.swing.JMenuItem EditMenuPopup;
    private javax.swing.JPopupMenu PopupMenuMedicine;
    private javax.swing.JTextField inputMedicine;
    private javax.swing.JTextField inputQuantity;
    private javax.swing.JTextField inputmedicinename;
    private javax.swing.JTextField inputprice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> jboxcategory;
    private javax.swing.JTable medicalTable;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
}
