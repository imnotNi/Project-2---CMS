/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package menu;
import connect.MainConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author PC
 */
public class InvoiceDetail extends javax.swing.JFrame {

    /**
     * Creates new form InvoiceDetail
     */
  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        invoicedetail_tb = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        invoicedetail_tb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Invoice", "Medicine Name", "Quantity", "UnitPrice", "TotalPrice"
            }
        ));
        jScrollPane1.setViewportView(invoicedetail_tb);

        jLabel6.setBackground(new java.awt.Color(255, 51, 51));
        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("X");
        jLabel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 817, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(78, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        this.dispose();
    }//GEN-LAST:event_jLabel6MouseClicked

    /**
     * @param invoiceId
     * @param args the command line arguments
     */
   
public void addDataById(String invoiceId) {
    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;
    
    try {
        conn = MainConnection.getConnection();
        String query = "SELECT id.Detail_id, id.Invoice_id, m.Medicine_name, id.Quantity, id.UnitPrice, id.TotalPrice " +
                       "FROM InvoiceDetails id " +
                       "INNER JOIN Medicine m ON id.Medicine_id = m.Medicine_id " +
                       "WHERE id.Invoice_id=?";
        pstmt = conn.prepareStatement(query);
        pstmt.setString(1, invoiceId);
        rs = pstmt.executeQuery();

        DefaultTableModel tableModel = (DefaultTableModel) invoicedetail_tb.getModel();

        while (rs.next()) {
            Object[] row = new Object[6];
            row[0] = rs.getInt("Invoice_id");
            row[1] = rs.getString("Medicine_name");
            row[2] = rs.getInt("Quantity");
            row[3] = rs.getDouble("UnitPrice");
            row[4] = rs.getDouble("TotalPrice");
            tableModel.addRow(row);
        }
    } catch (SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            if (rs != null) {
                rs.close();
            }
            if (pstmt != null) {
                pstmt.close();
            }
            if (conn != null) {
                conn.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTable invoicedetail_tb;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
   public InvoiceDetail() {
        initComponents();
       
    }
       private void loadInvoiceDetails() {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = MainConnection.getConnection();
            String query = "SELECT i.Invoice_id, m.Medicine_name, id.Quantity, id.UnitPrice, id.TotalPrice " +
                           "FROM InvoiceDetails id " +
                           "INNER JOIN Invoices i ON id.Invoice_id = i.Invoice_id " +
                           "INNER JOIN Medicine m ON id.Medicine_id = m.Medicine_id";
            pstmt = conn.prepareStatement(query);
            rs = pstmt.executeQuery();

            DefaultTableModel model = (DefaultTableModel) invoicedetail_tb.getModel();
            while (rs.next()) {
                Object[] row = new Object[5];
                row[0] = rs.getInt("Invoice_id");
                row[1] = rs.getString("Medicine_name");
                row[2] = rs.getInt("Quantity");
                row[3] = rs.getDouble("UnitPrice");
                row[4] = rs.getDouble("TotalPrice");
                model.addRow(row);
            }
        } catch (SQLException ex) {
            System.out.println("Error: " + ex.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (SQLException ex) {
                System.out.println("Error closing resources: " + ex.getMessage());
            }
        }
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InvoiceDetail().setVisible(true);
            }
        });
    }
  

   
}