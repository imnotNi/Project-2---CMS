/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package menu;
import menu.Medicines;
import connect.MainConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HOANG KHANG
 */
public class MedicinesCategory extends javax.swing.JFrame {

    /**
     * Creates new form MedicinesCategory
     */
    public MedicinesCategory() {
        initComponents();
        categoryTable.setComponentPopupMenu(jPopupMenu1);
        loadCategory();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        EditCategory = new javax.swing.JMenuItem();
        DeleteCategory = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        categoryTable = new javax.swing.JTable();
        inputCatName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        SaveButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        inputCatid = new javax.swing.JTextField();
        ResetButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        EditCategory.setText("Edit");
        EditCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditCategoryActionPerformed(evt);
            }
        });
        jPopupMenu1.add(EditCategory);

        DeleteCategory.setText("Delete");
        DeleteCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteCategoryActionPerformed(evt);
            }
        });
        jPopupMenu1.add(DeleteCategory);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        categoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "category name"
            }
        ));
        jScrollPane1.setViewportView(categoryTable);

        inputCatName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputCatNameActionPerformed(evt);
            }
        });

        jLabel1.setText("Category Name:");

        SaveButton.setText("Save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Category ID:");

        inputCatid.setEditable(false);

        ResetButton.setText("Reset");
        ResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetButtonActionPerformed(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(255, 51, 51));
        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("X");
        jLabel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputCatName, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputCatid, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SaveButton)
                            .addComponent(ResetButton))))
                .addGap(18, 18, 18))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(inputCatid, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ResetButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputCatName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SaveButton)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputCatNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputCatNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputCatNameActionPerformed

    private void EditCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditCategoryActionPerformed
      int row = categoryTable.getSelectedRow();
        String medicalid = null;
        if (row >= 0) {
            medicalid = (String)categoryTable.getValueAt(row, 0);
        }

        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = MainConnection.getConnection();
            String query = "Select * from MedicineCategories where Category_id=" + medicalid;
            pstmt = conn.prepareStatement(query);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                inputCatid.setText(rs.getString("Category_id"));
                inputCatName.setText(rs.getString("CategoryName"));
            }
        } catch (SQLException ex) {
            System.out.println("Error: " + ex.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                System.out.println("Error closing resources: " + ex.getMessage());
            }
        }   // TODO add your handling code here:
    }//GEN-LAST:event_EditCategoryActionPerformed

    private void ResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetButtonActionPerformed
       inputCatName.setText("");
       inputCatid.setText("");
    }//GEN-LAST:event_ResetButtonActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
    // Lấy dữ liệu từ các trường văn bản
    String categoryName = inputCatName.getText().trim();
    String categoryId = inputCatid.getText().trim();

    // Kiểm tra xem liệu các trường đã được điền đầy đủ hay không
    if (!categoryName.isEmpty()) {
        Connection conn = null;
        PreparedStatement pstmt = null;

        try {
            conn = MainConnection.getConnection();

            // Nếu inputCatid trống, thêm mới danh mục
            if (categoryId.isEmpty()) {
                String insertQuery = "INSERT INTO MedicineCategories (CategoryName) VALUES (?)";
                pstmt = conn.prepareStatement(insertQuery);
                pstmt.setString(1, categoryName);
                pstmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Category added successfully");
            } else { // Nếu không, cập nhật danh mục
                String updateQuery = "UPDATE MedicineCategories SET CategoryName = ? WHERE Category_id = ?";
                pstmt = conn.prepareStatement(updateQuery);
                pstmt.setString(1, categoryName);
                pstmt.setString(2, categoryId);
                pstmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Category updated successfully");
            }

            // Làm mới bảng dữ liệu
            DefaultTableModel model = (DefaultTableModel) categoryTable.getModel();
            model.setRowCount(0); // Xóa dữ liệu hiện có
            loadCategory(); // Tải lại dữ liệu từ cơ sở dữ liệu
        } catch (SQLException ex) {
            System.out.println("Error: " + ex.getMessage());
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        } finally {
            try {
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (SQLException ex) {
                System.out.println("Error closing resources: " + ex.getMessage());
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please provide category name");
    }
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void DeleteCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteCategoryActionPerformed
      int selectedRow = categoryTable.getSelectedRow();
    if (selectedRow != -1) {
        String categoryId = categoryTable.getValueAt(selectedRow, 0).toString();
        
        // Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this category and all associated medicines?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            // Delete all medicines associated with the category
            deleteMedicinesByCategory(categoryId);

            // Now delete the category
            deleteCategory(categoryId);

            // Reload the table data
            DefaultTableModel model = (DefaultTableModel) categoryTable.getModel();
            model.setRowCount(0); // Clear existing data
            loadCategory(); // Reload data from database
        }
    } else {
        JOptionPane.showMessageDialog(this, "No category selected for deletion");
    }
    }//GEN-LAST:event_DeleteCategoryActionPerformed

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        this.dispose();
    }//GEN-LAST:event_jLabel6MouseClicked
    private void deleteMedicinesByCategory(String categoryId) {
    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;

    try {
        conn = MainConnection.getConnection();
        String query = "SELECT Medicine_id FROM Medicine WHERE Category_id = " + categoryId;
        pstmt = conn.prepareStatement(query);
        rs = pstmt.executeQuery();

        while (rs.next()) {
            String medicineId = rs.getString("Medicine_id");
            DeleteMedicine(medicineId);

        }
    } catch (SQLException ex) {
        System.out.println("Error: " + ex.getMessage());
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
            if (conn != null) conn.close();
        } catch (SQLException ex) {
            System.out.println("Error closing resources: " + ex.getMessage());
        }
    }
}
public void DeleteMedicine(String medicalid) {
        Connection conn = null;
        PreparedStatement pstmt1 = null;
        PreparedStatement pstmt2 = null;
        ResultSet rs = null;

        try {
            conn = MainConnection.getConnection();
            conn.setAutoCommit(false); // Start transaction

            String deleteInvoiceDetailsQuery = "DELETE FROM InvoiceDetails WHERE Medicine_id = " + medicalid + "";
            String deleteMedicineQuery = "DELETE FROM Medicine WHERE Medicine_id = " + medicalid + "";
            pstmt1 = conn.prepareStatement(deleteInvoiceDetailsQuery);
            pstmt1.executeUpdate();

            pstmt2 = conn.prepareStatement(deleteMedicineQuery);
            pstmt2.executeUpdate();

            conn.commit(); // Commit transaction

        } catch (SQLException ex) {
            System.out.println("Error: " + ex.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt1 != null) {
                    pstmt1.close();
                }
                if (pstmt2 != null) {
                    pstmt2.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                System.out.println("Error closing resources: " + ex.getMessage());
            }
        }
    }
private void deleteCategory(String categoryId) {
    Connection conn = null;
    PreparedStatement pstmt = null;

    try {
        conn = MainConnection.getConnection();
        String deleteCategoryQuery = "DELETE FROM MedicineCategories WHERE Category_id = " + categoryId;
        pstmt = conn.prepareStatement(deleteCategoryQuery);
        pstmt.executeUpdate();

        JOptionPane.showMessageDialog(this, "Category deleted successfully");
    } catch (SQLException ex) {
        System.out.println("Error: " + ex.getMessage());
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    } finally {
        try {
            if (pstmt != null) pstmt.close();
            if (conn != null) conn.close();
        } catch (SQLException ex) {
            System.out.println("Error closing resources: " + ex.getMessage());
        }
    }
}
    public void loadCategory(){
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            conn = MainConnection.getConnection();
            String query = "Select * from MedicineCategories";
            pstmt = conn.prepareStatement(query);
            rs = pstmt.executeQuery();
            DefaultTableModel model = (DefaultTableModel) categoryTable.getModel();
            while (rs.next()) {
                Object[] row = new Object[2];
                row[0] = rs.getString("Category_id");
                row[1] = rs.getString("CategoryName"); 
                model.addRow(row);
            }
        } catch (SQLException ex) {
            System.out.println("Error: " + ex.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (SQLException ex) {
                System.out.println("Error closing resources: " + ex.getMessage());
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MedicinesCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MedicinesCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MedicinesCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MedicinesCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MedicinesCategory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem DeleteCategory;
    private javax.swing.JMenuItem EditCategory;
    private javax.swing.JButton ResetButton;
    private javax.swing.JButton SaveButton;
    private javax.swing.JTable categoryTable;
    private javax.swing.JTextField inputCatName;
    private javax.swing.JTextField inputCatid;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
